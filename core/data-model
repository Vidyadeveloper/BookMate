export const personModel = {
  id: "person",
  label: "Person",
  description: "A reusable entity representing an individual",
  extends: "blaze-entity",
  isEditable: false,
  attributes: [
    {
      id: "firstName",
      type: "string",
      label: "First Name",
      required: true,
      validations: { pattern: "^[A-Za-z]+$", errorMessage: "Letters only" },
      displayProps: { group: "Personal", order: 1 },
    },
    {
      id: "lastName",
      type: "string",
      label: "Last Name",
      required: true,
      validations: { pattern: "^[A-Za-z]+$", errorMessage: "Letters only" },
      displayProps: { group: "Personal", order: 2 },
    },
    {
      id: "dateOfBirth",
      type: "date",
      label: "Date of Birth",
      required: true,
      validations: { before: "today", errorMessage: "Must be in the past" },
    },
    {
      id: "bsn",
      type: "string",
      label: "BSN",
      validations: { pattern: "^[0-9]{9}$", errorMessage: "9 digits" },
      unique: true,
    },
    {
      id: "phoneNumber",
      type: "string",
      label: "Phone Number",
      controlType: "tel",
      component: "blaze-phone",
      validations: {
        pattern: "^[0-9]{7,15}$",
        errorMessage: "7-15 digits",
      },
      displayProps: {
        prefix: "countryCode",
      },
    },
    {
      id: "address",
      type: "reference",
      label: "Address",
      entityType: "address",
      relationship: "one-to-one",
      component: "address-details",
      displayProps: { collapsible: true },
    },
    {
      id: "fullName",
      type: "computed",
      label: "Full Name",
      compute: (e) => `${e.firstName} ${e.lastName}`,
      dependencies: ["firstName", "lastName"],
    },
  ],
};
